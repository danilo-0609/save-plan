server {
    listen       80;
    server_name  localhost;

    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate /etc/nginx/ssl/certs/certificate.crt; 
    ssl_certificate_key /etc/nginx/ssl/private/private.key; 

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers off;

    # Proxy API requests
    location /api/ {
        proxy_pass https://api:7000; 
        limit_req zone=api_limit burst=20 nodelay;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;

        add_header X-RateLimit-Limit 10;
        add_header X-RateLimit-Remaining $limit_req_remaining;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";

        # Error handling
        error_page 429 = @rate_limited;
    }


    # Proxy requests to Keycloak
    location /auth/ {
        limit_req zone=login_limit burst=3;
        rewrite ^/auth/(.*)$ /$1 break;  
        proxy_pass http://keycloak:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location @rate_limited {
        default_type application/json;
        return 429 '{"error": "Too Many Requests", "message": "Please try again later"}';
    }

    # Error handling
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

geo $limit_exempt {
    default 0;
    10.0.0.0/8 1;  # IPs internas
    127.0.0.1/32 1; 
}

map $limit_exempt $limit_req_remaining {
   0 "10 per second";    # IPs normales
    1 "unlimited";        # IPs exentas
}